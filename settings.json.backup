{
  "permissions": {
    "allow": [
      "Bash(git:*)",
      "Bash(gh:*)",
      "Bash(python:*)",
      "Bash(python3:*)",
      "Bash(vpython:*)",
      "Bash(TESTING=true python:*)",
      "Bash(TESTING=true python3:*)",
      "Bash(TESTING=true vpython:*)",
      "Bash(./run_tests.sh)",
      "Bash(../run_tests.sh)",
      "Bash(find:*)",
      "Bash(echo:*)",
      "Bash(grep:*)",
      "Bash(rg:*)",
      "Bash(mv:*)",
      "Bash(mkdir:*)",
      "Bash(ls:*)",
      "Bash(rm:*)",
      "Bash(cp:*)",
      "Bash(chmod:*)",
      "Bash(sed:*)",
      "Bash(realpath:*)",
      "Bash(timeout:*)",
      "Bash(source:*)",
      "Bash(true)",
      "Bash(xdg-open:*)",
      "Bash(pip install:*)",
      "mcp__ide__getDiagnostics",
      "WebFetch(domain:github.com)",
      "WebFetch(domain:docs.anthropic.com)",
      "Bash(for branch in:*)",
      "Bash(do)",
      "Bash(done)",
      "Bash(__NEW_LINE__:*)",
      "Bash(claude --version)",
      "Bash(/permissions add read write execute coverage testing)",
      "Bash(/dev/null)",
      "Bash(gcloud meta list-files-for-upload:*)",
      "Bash(gcloud builds submit:*)",
      "Bash(gcloud topic:*)",
      "Bash(./deploy.sh:*)",
      "Bash(cat:*)",
      "Bash(../vpython test_deployment_build.py -v)",
      "Bash(../vpython test_world_loader.py -v)",
      "Bash(../vpython test_world_loader_integration.py -v)",

      "Bash(npm:*)",
      "Bash(npm install:*)",
      "Bash(npm run:*)",
      "Bash(npm test:*)",
      "Bash(npm run test:*)",
      "Bash(npm run build:*)",
      "Bash(npm run dev:*)",
      "Bash(npm run start:*)",
      "Bash(npm run lint:*)",
      "Bash(npm run format:*)",
      "Bash(npm ci)",
      "Bash(npm update:*)",
      "Bash(npm audit:*)",
      "Bash(npm outdated:*)",
      "Bash(npx:*)",

      "Bash(yarn:*)",
      "Bash(yarn install)",
      "Bash(yarn add:*)",
      "Bash(yarn run:*)",
      "Bash(yarn test:*)",
      "Bash(yarn build:*)",
      "Bash(yarn dev:*)",
      "Bash(yarn start:*)",
      "Bash(pnpm:*)",
      "Bash(pnpm install)",
      "Bash(pnpm run:*)",
      "Bash(pnpm test:*)",
      "Bash(bun:*)",
      "Bash(bun install)",
      "Bash(bun run:*)",
      "Bash(bun test:*)",

      "Bash(make:*)",
      "Bash(make clean)",
      "Bash(make build)",
      "Bash(make test)",
      "Bash(webpack:*)",
      "Bash(vite:*)",
      "Bash(tsc:*)",
      "Bash(babel:*)",
      "Bash(rollup:*)",
      "Bash(esbuild:*)",

      "Bash(eslint:*)",
      "Bash(prettier:*)",
      "Bash(husky:*)",
      "Bash(lint-staged:*)",
      "Bash(pre-commit:*)",
      "Bash(black:*)",
      "Bash(flake8:*)",
      "Bash(mypy:*)",
      "Bash(isort:*)",

      "Bash(docker:*)",
      "Bash(docker build:*)",
      "Bash(docker run:*)",
      "Bash(docker ps:*)",
      "Bash(docker images:*)",
      "Bash(docker-compose:*)",
      "Bash(docker compose:*)",
      "Bash(docker compose up:*)",
      "Bash(docker compose down:*)",

      "Bash(curl:*)",
      "Bash(wget:*)",
      "Bash(ssh:*)",
      "Bash(scp:*)",
      "Bash(rsync:*)",

      "Bash(head:*)",
      "Bash(tail:*)",
      "Bash(wc:*)",
      "Bash(sort:*)",
      "Bash(uniq:*)",
      "Bash(awk:*)",
      "Bash(cut:*)",
      "Bash(tr:*)",
      "Bash(diff:*)",
      "Bash(patch:*)",
      "Bash(tar:*)",
      "Bash(zip:*)",
      "Bash(unzip:*)",
      "Bash(gzip:*)",
      "Bash(gunzip:*)",

      "Bash(ps:*)",
      "Bash(top)",
      "Bash(htop)",
      "Bash(kill:*)",
      "Bash(killall:*)",
      "Bash(jobs)",
      "Bash(nohup:*)",
      "Bash(bg)",
      "Bash(fg)",
      "Bash(which:*)",
      "Bash(whereis:*)",
      "Bash(type:*)",
      "Bash(env)",
      "Bash(export:*)",
      "Bash(alias:*)",
      "Bash(history)",

      "Bash(pwd)",
      "Bash(whoami)",
      "Bash(id)",
      "Bash(date)",
      "Bash(uptime)",
      "Bash(df:*)",
      "Bash(du:*)",
      "Bash(free)",
      "Bash(uname:*)",

      "Bash(jq:*)",
      "Bash(yq:*)",
      "Bash(xmllint:*)",

      "Bash(mocha:*)",
      "Bash(pytest:*)",
      "Bash(coverage:*)",
      "Bash(nyc:*)",

      "Bash(git-lfs:*)",
      "Bash(git lfs:*)"
    ],
    "deny": []
  },
  "hooks": {
    "PreToolUse": [
      {
        "matcher": "*",
        "hooks": [
          {
            "type": "command",
            "command": "bash -c 'branch=$(git branch --show-current 2>/dev/null || echo \"unknown\"); upstream=$(git rev-parse --abbrev-ref @{upstream} 2>/dev/null || echo \"no upstream\"); pr_data=$(gh pr list --head \"$branch\" --json number,url 2>/dev/null); if [ -n \"$pr_data\" ] && [ \"$pr_data\" != \"[]\" ]; then pr=$(echo \"$pr_data\" | grep -o \"\\\"number\\\":[0-9]*\" | cut -d: -f2 | head -1); url=$(echo \"$pr_data\" | grep -o \"\\\"url\\\":\\\"[^\\\"]*\\\"\" | cut -d\\\" -f4 | head -1); if [ -n \"$pr\" ]; then pr=\"#$pr $url\"; else pr=\"none\"; fi; else pr=\"none\"; fi; echo \"[Local: $branch | Remote: $upstream | PR: $pr]\"'",
            "description": "Auto-generate branch header for CLAUDE.md compliance"
          }
        ]
      }
    ],
    "Stop": [
      {
        "matcher": "",
        "hooks": [
          {
            "type": "command",
            "command": "bash -c 'branch=$(git branch --show-current 2>/dev/null || echo \"unknown\"); upstream=$(git rev-parse --abbrev-ref @{upstream} 2>/dev/null || echo \"no upstream\"); pr_data=$(gh pr list --head \"$branch\" --json number,url 2>/dev/null); if [ -n \"$pr_data\" ] && [ \"$pr_data\" != \"[]\" ]; then pr=$(echo \"$pr_data\" | grep -o \"\\\"number\\\":[0-9]*\" | cut -d: -f2 | head -1); url=$(echo \"$pr_data\" | grep -o \"\\\"url\\\":\\\"[^\\\"]*\\\"\" | cut -d\\\" -f4 | head -1); if [ -n \"$pr\" ]; then pr=\"#$pr $url\"; else pr=\"none\"; fi; else pr=\"none\"; fi; echo \"[Local: $branch | Remote: $upstream | PR: $pr]\"'",
            "description": "Generate git branch header for response footer"
          }
        ]
      }
    ]
  }
}
